<%- include("helpers/Helpers") -%>

<%_ for type in types.classes where type.annotations[Key.Presentable.generateV2] != nil { _-%>
<%_ let fraktal = Fraktal(type: type) _-%><% -%>
// sourcery:inline:<%= type.name %>.Presentable
// swiftlint:disable line_length
extension <%= type.name %>: Presentable {

    <%= fraktal.accessLevel %> var present: (<%= removeDots(type.name) %>Presenters) -> Disposable? {
        return { [weak self] presenters in
            guard let sself = self else { return nil }
            let disposable = CompositeDisposable()
            <%_ for presenter in fraktal.presenters { -%>
            <%_ for line in presenter.present() { -%>
            <%= line _%>
            <%_ } -%>
            <%_ } -%>
            return disposable
        }
    }
}
// swiftlint:enable line_length
// sourcery:end
<%_ } -%>
